// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/article.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "article-service/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIArticleRepository is a mock of IArticleRepository interface.
type MockIArticleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIArticleRepositoryMockRecorder
}

// MockIArticleRepositoryMockRecorder is the mock recorder for MockIArticleRepository.
type MockIArticleRepositoryMockRecorder struct {
	mock *MockIArticleRepository
}

// NewMockIArticleRepository creates a new mock instance.
func NewMockIArticleRepository(ctrl *gomock.Controller) *MockIArticleRepository {
	mock := &MockIArticleRepository{ctrl: ctrl}
	mock.recorder = &MockIArticleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArticleRepository) EXPECT() *MockIArticleRepositoryMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockIArticleRepository) GetById(context context.Context, id int64) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", context, id)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIArticleRepositoryMockRecorder) GetById(context, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIArticleRepository)(nil).GetById), context, id)
}

// MockIArticleUseCase is a mock of IArticleUseCase interface.
type MockIArticleUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIArticleUseCaseMockRecorder
}

// MockIArticleUseCaseMockRecorder is the mock recorder for MockIArticleUseCase.
type MockIArticleUseCaseMockRecorder struct {
	mock *MockIArticleUseCase
}

// NewMockIArticleUseCase creates a new mock instance.
func NewMockIArticleUseCase(ctrl *gomock.Controller) *MockIArticleUseCase {
	mock := &MockIArticleUseCase{ctrl: ctrl}
	mock.recorder = &MockIArticleUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArticleUseCase) EXPECT() *MockIArticleUseCaseMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockIArticleUseCase) GetByID(ctx context.Context, id int64) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIArticleUseCaseMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIArticleUseCase)(nil).GetByID), ctx, id)
}
